#!/usr/bin/env python3
# pylint: disable=missing-function-docstring

"""
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

import os
import requests
from packaging.version import Version


def get_current_version() -> str:
    with open("VERSION", encoding="utf-8") as file:
        return file.read().strip()


def get_pypi_manifest():
    try:
        resp = requests.get("https://test.pypi.org/pypi/mwaa-dr/json", timeout=10)
        manifest = resp.json()
        return manifest
    except requests.exceptions.RequestException as e:
        print(f"Error fetching manifest: {e}")
        return {}


def bump_dev_release(manifest) -> str:
    current_version = Version(get_current_version())
    new_base_version = ""

    major = current_version.major
    minor = current_version.minor
    micro = current_version.micro

    if current_version.is_devrelease:
        dev = current_version.dev
        new_base_version = Version(f"{major}.{minor}.{micro}dev{dev+1}")
    else:
        new_base_version = Version(f"{major}.{minor}.{micro+1}dev1")

    for release in manifest.get("releases", []):
        print(f"Checking release: {release} >= {new_base_version}")
        version = Version(release)
        if version.is_devrelease and version >= new_base_version:
            new_base_version = Version(
                f"{version.major}.{version.minor}.{version.micro}dev{version.dev+1}"
            )

    return str(new_base_version)


def get_version():
    manifest = get_pypi_manifest()
    current_version = get_current_version()
    print(f"Current version: {current_version}")

    github_ref = os.getenv("GITHUB_REF") or ""

    if github_ref.startswith("refs/tags/"):
        print("GitHub version tag found. Using GitHub version tag!")
        return github_ref.split("/")[2]

    print("No GitHub version tag found. Bumping version for development release!")
    return bump_dev_release(manifest)


def set_version(version):
    with open("VERSION", mode="w", encoding="utf-8") as file:
        file.write(version)


if __name__ == "__main__":
    version = get_version()
    print(f"Next version for build: {version}")
    set_version(version)
