{
    "info": {
      "author": "Chandan Rupakheti, Parnab Basak",
      "author_email": null,
      "bugtrack_url": null,
      "classifiers": [
        "Development Status :: 4 - Beta",
        "Programming Language :: Python"
      ],
      "description": "# MWAA Disaster Recovery\n\n![MWAA](https://img.shields.io/badge/MWAA-2.8.1_|_2.7.2_|_2.6.3_|_2.5.1-blue)\n![Python](https://img.shields.io/badge/Python-3.4+-blue)\n[![Black](https://img.shields.io/badge/Code%20Style-Black-000000.svg)](https://github.com/psf/black)\n[![CodeCoverage](https://raw.githubusercontent.com/aws-samples/mwaa-disaster-recovery/python-coverage-comment-action-data/badge.svg)](https://htmlpreview.github.io/?https://github.com/aws-samples/mwaa-disaster-recovery/blob/python-coverage-comment-action-data/htmlcov/index.html)\n\nThe `mwaa-dr` PyPi package is a part of the larger [MWAA DR solution](https://github.com/aws-samples/mwaa-disaster-recovery) for the use case where exporting and importing metadata store needs to be performed independent to the broader DR solution. As of the time of writing, access to the MWAA metadata store is only available through DAGs. This solution simplifies the process of creating backup and restore DAGs, respectively, by providing a reusable python library.\n\n## Installation\n\nYou can install the `mwaa-dr` package by including the latest version in your MWAA `requirements.txt` file.\n\n> **NOTE**: The project currently supports the following versions of MWAA:\n> - **2.8.1**\n> - **2.7.2**\n> - **2.6.3**\n> - **2.5.1**\n\n## Simple Use Case\n\nLet's look at creating a metadata backup and restore dags, respectively, as follows:\n\n### Metadata Backup DAG\n\nLet's assume your environment version is `2.8.1`. You can create a metadata backup dag by creating a python file in your MWAA `dags` folder as follows:\n\n**backup_metadata.py**:\n```python\nfrom mwaa_dr.v_2_8.dr_factory import DRFactory_2_8\n\nfactory = DRFactory_2_8(\n    dag_id='backup_metadata',\n    path_prefix='data',\n    storage_type='S3'\n)\n\nfactory.create_backup_dag()\n```\n\nFor running backup and restore on your Amazon MWAA environment on AWS, you need to do the following:\n1. Ensure you have an S3 bucket created to store the backup.\n2. Ensure that your MWAA execution role has read and write permissions on the bucket.\n3. Create an Airflow variable with the key named `DR_BACKUP_BUCKET` and the value containing the **name** (not ARN) of the S3 bucket.\n4. You are all set to manually trigger the backup and restore DAGs at any point.\n\nIf you want to use the solution with [aws-mwaa-local-runner](https://github.com/aws/aws-mwaa-local-runner), change the `storage_type` argument from `S3` to `LOCAL_FS`. The backup will be located in the `dags/data` folder or more generally at the `dags/<path_prefix>` folder of the local runner project.\n\n### Metadata Restore DAG\n\nYou can create a metadata restore dag by creating a python file in your MWAA `dags` folder as follows:\n\n**restore_metadata.py**:\n```python\nfrom mwaa_dr.v_2_8.dr_factory import DRFactory_2_8\n\nfactory = DRFactory_2_8(\n    dag_id='restore_metadata',\n    path_prefix='data',\n    storage_type='S3'\n)\n\nfactory.create_restore_dag()\n```\n\nNote that you will need an empty database for restore to work. To cleanup the database before restore, please use the [clean_metadata](https://github.com/aws-samples/mwaa-disaster-recovery/blob/main/assets/dags/mwaa_dr/cleanup_metadata.py) DAG. Please make sure to use wider range for `MAX_AGE_IN_DAYS` and `MIN_AGE_IN_DAYS` (a value of `0` is suitable for min age for this use case) so that the metadata store is completely clean.\n\n\n## Advance Use Case\n\nYou may have some advance use cases, such as, a need to exclude or include additional tables from your backup, update SQL scripts for specific tables, and others. Note that, by default, the solution backs up only `variable`, `connection`, `slot_pool`, `log`, `job`, `dag_run`, `trigger`, `task_instance`, and `task_fail` tables. Majority of other tables are auto-generated by scheduler or by the webserver and thus, excluded from the list of tables to be backed up.\n\nTo add/remove tables from the backup or customize any aspects of the solution, you will derive from an appropriate factory class and override its methods. To see this more concretely, let's assume you want to exclude `variable` and `connection` tables from the backup and restore operations. Please follow the subsequent implementation guidelines.\n\nFirst, find the appropriate factory class from the supported versions in the [mwaa_dr](https://github.com/aws-samples/mwaa-disaster-recovery/tree/main/assets/dags/mwaa_dr) package. Let's assume your environment version is `2.7.2`. So, you will pick [DRFactory_2_7](https://github.com/aws-samples/mwaa-disaster-recovery/blob/main/assets/dags/mwaa_dr/v_2_7/dr_factory.py) as your base class for inheritance and override its `setup_tables` method.\n\nNote that majority of the functionality for the DR framework has either been implemented in [BaseDRFactory](https://github.com/aws-samples/mwaa-disaster-recovery/blob/main/assets/dags/mwaa_dr/v_2_7/dr_factory.py) or in [DRFactory_2_5](https://github.com/aws-samples/mwaa-disaster-recovery/blob/main/assets/dags/mwaa_dr/v_2_5/dr_factory.py). The other factories just implement a chain of inheritance from these classes and override specific methods to implement differences.\n\nHere is a sample implementation of your derived class that you will need to create in your `dags` folder, let's name the file `custom_dr_factory_2_7.py`:\n\n**custom_dr_factory_2_7.py**:\n```python\nfrom mwaa_dr.framework.model.base_table import BaseTable\nfrom mwaa_dr.framework.model.dependency_model import DependencyModel\nfrom mwaa_dr.v_2_7.dr_factory import DRFactory_2_7\n\nclass CustomDRFactory_2_7(DRFactory_2_7):\n    def setup_tables(self, model: DependencyModel[BaseTable]) -> list[BaseTable]:\n        # Create needed tables, all extend from the BaseTable class\n        active_dag = self.active_dag(model)\n\n        # Comment out variable and connection from the previous implementation\n        # variable = self.variable(model)\n        # connection = self.connection(model)\n        slot_pool = self.slot_pool(model)\n\n        log = self.log(model)\n        job = self.job(model)\n        dag_run = self.dag_run(model)\n        trigger = self.trigger(model)\n\n        task_instance = self.task_instance(model)\n        task_fail = self.task_fail(model)\n\n        # Specify dependencies\n        task_instance << [job, trigger, dag_run]\n        task_fail << [task_instance, dag_run]\n        active_dag << [\n            # variable,\n            # connection,\n            slot_pool,\n            log,\n            job,\n            dag_run,\n            trigger,\n            task_instance,\n            task_fail,\n        ]\n\n        # Return the list of tables to be included in backup and restore\n        return [\n            # variable,\n            # connection,\n            slot_pool,\n            log,\n            job,\n            dag_run,\n            trigger,\n            task_instance,\n            task_fail,\n            active_dag,\n        ]\n```\n\nHere is your metadata backup dag that will use your custom factory (also in the `dags` folder):\n\n**metadata_backup.py**:\n```python\nfrom custom_dr_factory_2_7 import CustomDRFactory_2_7\n\nfactory = CustomDRFactory_2_7(\n    dag_id='backup_metadata',\n    path_prefix='data',\n    storage_type='S3'\n)\n\nfactory.create_backup_dag()\n```\n\nAnd finally, here is your metadata restore dag (also in the `dags` folder):\n\n**restore_metadata.py**:\n```python\nfrom custom_dr_factory_2_7 import CustomDRFactory_2_7\n\nfactory = CustomDRFactory_2_7(\n    dag_id='restore_metadata',\n    path_prefix='data',\n    storage_type='S3'\n)\n\nfactory.create_restore_dag()\n```\n",
      "description_content_type": "text/markdown",
      "docs_url": null,
      "download_url": null,
      "downloads": {
        "last_day": -1,
        "last_month": -1,
        "last_week": -1
      },
      "dynamic": null,
      "home_page": null,
      "keywords": "MWAA, airflow, disaster, recovery, DR",
      "license": "Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
      "maintainer": "Chandan Rupakheti",
      "maintainer_email": null,
      "name": "mwaa-dr",
      "package_url": "https://test.pypi.org/project/mwaa-dr/",
      "platform": null,
      "project_url": "https://test.pypi.org/project/mwaa-dr/",
      "project_urls": {
        "Bug Tracker": "https://github.com/aws-samples/mwaa-disaster-recovery/issues",
        "Changelog": "https://github.com/aws-samples/mwaa-disaster-recovery/blob/main/CHANGELOG.md",
        "Documentation": "https://github.com/aws-samples/mwaa-disaster-recovery/blob/main/PYPIDOC.md",
        "Homepage": "https://github.com/aws-samples/mwaa-disaster-recovery",
        "Repository": "https://github.com/aws-samples/mwaa-disaster-recovery.git"
      },
      "provides_extra": null,
      "release_url": "https://test.pypi.org/project/mwaa-dr/0.2.0rc4/",
      "requires_dist": [
        "smart-open>=7.0.4"
      ],
      "requires_python": ">=3.4",
      "summary": "DR Solution for Amazon Managed Workflows for Apache Airflow (MWAA)",
      "version": "0.2.0rc4",
      "yanked": false,
      "yanked_reason": null
    },
    "last_serial": 5127705,
    "releases": {
      "0.2.0.dev1": [
        {
          "comment_text": "",
          "digests": {
            "blake2b_256": "1df80b9093eca92b888f4b1033de6857135c2cc1907d64f1138a14636531c4fe",
            "md5": "be8c555dad406ea9f16eb0668913df62",
            "sha256": "82736c3b1259cc50ceee95bfd64b1bf99b9c7920fffcc0f1b74155d3c5491477"
          },
          "downloads": -1,
          "filename": "mwaa_dr-0.2.0.dev1-py3-none-any.whl",
          "has_sig": false,
          "md5_digest": "be8c555dad406ea9f16eb0668913df62",
          "packagetype": "bdist_wheel",
          "python_version": "py3",
          "requires_python": ">=3.4",
          "size": 35080,
          "upload_time": "2024-06-18T18:50:03",
          "upload_time_iso_8601": "2024-06-18T18:50:03.731195Z",
          "url": "https://test-files.pythonhosted.org/packages/1d/f8/0b9093eca92b888f4b1033de6857135c2cc1907d64f1138a14636531c4fe/mwaa_dr-0.2.0.dev1-py3-none-any.whl",
          "yanked": false,
          "yanked_reason": null
        },
        {
          "comment_text": "",
          "digests": {
            "blake2b_256": "7484f4350ad77d87104fdfeccc0a2b23d745e5daf7820f1841a24ffc5b4ebc3f",
            "md5": "0e6a5591d067ff5da906df3ff62ca732",
            "sha256": "12efaaf7dd0a3650ec9259a879afb15fbf81c3e0d0ce3d48d4aec6bf0b2b4660"
          },
          "downloads": -1,
          "filename": "mwaa_dr-0.2.0.dev1.tar.gz",
          "has_sig": false,
          "md5_digest": "0e6a5591d067ff5da906df3ff62ca732",
          "packagetype": "sdist",
          "python_version": "source",
          "requires_python": ">=3.4",
          "size": 1518107,
          "upload_time": "2024-06-18T18:50:04",
          "upload_time_iso_8601": "2024-06-18T18:50:04.968013Z",
          "url": "https://test-files.pythonhosted.org/packages/74/84/f4350ad77d87104fdfeccc0a2b23d745e5daf7820f1841a24ffc5b4ebc3f/mwaa_dr-0.2.0.dev1.tar.gz",
          "yanked": false,
          "yanked_reason": null
        }
      ],
      "0.2.0rc4": [
        {
          "comment_text": "",
          "digests": {
            "blake2b_256": "e7d1abfbb53eb2ae0411fc310827d3bba1fb1595b6a9cc4e280868700fabcfea",
            "md5": "590e2d4e7b683e73f951cafd86c78cdb",
            "sha256": "7a20cdbac2c3865ef527aa0acf1fe7aa7104e042e7c978c8a08c292df1e5e802"
          },
          "downloads": -1,
          "filename": "mwaa_dr-0.2.0rc4-py3-none-any.whl",
          "has_sig": false,
          "md5_digest": "590e2d4e7b683e73f951cafd86c78cdb",
          "packagetype": "bdist_wheel",
          "python_version": "py3",
          "requires_python": ">=3.4",
          "size": 35078,
          "upload_time": "2024-06-18T16:22:25",
          "upload_time_iso_8601": "2024-06-18T16:22:25.149086Z",
          "url": "https://test-files.pythonhosted.org/packages/e7/d1/abfbb53eb2ae0411fc310827d3bba1fb1595b6a9cc4e280868700fabcfea/mwaa_dr-0.2.0rc4-py3-none-any.whl",
          "yanked": false,
          "yanked_reason": null
        },
        {
          "comment_text": "",
          "digests": {
            "blake2b_256": "5d51042113549a2c2f116e335b3e26b781103e4eb4401b942ee2803630ec167f",
            "md5": "ad9870e73b3b2ba160557cdfaf0676e6",
            "sha256": "bf577e98b2baadf8a68547ad24f5ce3abbb47dc497e1fa3b5ea70bfc94e04d00"
          },
          "downloads": -1,
          "filename": "mwaa_dr-0.2.0rc4.tar.gz",
          "has_sig": false,
          "md5_digest": "ad9870e73b3b2ba160557cdfaf0676e6",
          "packagetype": "sdist",
          "python_version": "source",
          "requires_python": ">=3.4",
          "size": 1518094,
          "upload_time": "2024-06-18T16:22:26",
          "upload_time_iso_8601": "2024-06-18T16:22:26.249968Z",
          "url": "https://test-files.pythonhosted.org/packages/5d/51/042113549a2c2f116e335b3e26b781103e4eb4401b942ee2803630ec167f/mwaa_dr-0.2.0rc4.tar.gz",
          "yanked": false,
          "yanked_reason": null
        }
      ]
    },
    "urls": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7d1abfbb53eb2ae0411fc310827d3bba1fb1595b6a9cc4e280868700fabcfea",
          "md5": "590e2d4e7b683e73f951cafd86c78cdb",
          "sha256": "7a20cdbac2c3865ef527aa0acf1fe7aa7104e042e7c978c8a08c292df1e5e802"
        },
        "downloads": -1,
        "filename": "mwaa_dr-0.2.0rc4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "590e2d4e7b683e73f951cafd86c78cdb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 35078,
        "upload_time": "2024-06-18T16:22:25",
        "upload_time_iso_8601": "2024-06-18T16:22:25.149086Z",
        "url": "https://test-files.pythonhosted.org/packages/e7/d1/abfbb53eb2ae0411fc310827d3bba1fb1595b6a9cc4e280868700fabcfea/mwaa_dr-0.2.0rc4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d51042113549a2c2f116e335b3e26b781103e4eb4401b942ee2803630ec167f",
          "md5": "ad9870e73b3b2ba160557cdfaf0676e6",
          "sha256": "bf577e98b2baadf8a68547ad24f5ce3abbb47dc497e1fa3b5ea70bfc94e04d00"
        },
        "downloads": -1,
        "filename": "mwaa_dr-0.2.0rc4.tar.gz",
        "has_sig": false,
        "md5_digest": "ad9870e73b3b2ba160557cdfaf0676e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 1518094,
        "upload_time": "2024-06-18T16:22:26",
        "upload_time_iso_8601": "2024-06-18T16:22:26.249968Z",
        "url": "https://test-files.pythonhosted.org/packages/5d/51/042113549a2c2f116e335b3e26b781103e4eb4401b942ee2803630ec167f/mwaa_dr-0.2.0rc4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "vulnerabilities": []
  }
